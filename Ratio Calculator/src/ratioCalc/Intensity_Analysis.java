package ratioCalc;
import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.gui.GenericDialog;
import ij.io.DirectoryChooser;
import ij.io.FileSaver;
import ij.io.Opener;
import ij.measure.ResultsTable;
import ij.plugin.MontageMaker;
import ij.plugin.PlugIn;
import ij.process.ImageProcessor;
import ij.text.TextPanel;

import java.io.IOException;
import java.util.ArrayList;

// _____________________________________________________________________________________________________________
//
// -----------------------
// Intensity Analysis v1.0
// -----------------------
//
// Till Andlauer (till@andlauer.net)
// Date: 12-10-09
//
// Calculates various plots for data generated by Intensity Calculator. Actual plots can be generated with GnuPlot.
//
// Mann-Whitney U-test is done using the jsc.jar library from A.J. Bertie, http://www.jsc.nildram.co.uk
// It is unclear how jsc.jar handles ties.
// Because the sample sizes are clearly below 20 in most cases, a normal approximation of the U statistic is not feasible
// Yet due to the nature of the data very few ties are expected. Therefore reliable exact p-values should be calculated.
// In dubious situations the test should be repeated in a more advanced statistical program.  
//
// For statistics median values are used
// Uncertainties:
// Median Absolute Deviation    = The median of the differences of the individual values to the median              
// Standard Error of the Median = s = (a-b) / 3.4641; a = (n/2 + sqrt(3n)/n) th observation, b = (n/2 - sqrt(3n)/n) th observation, rounded up to the next number 
// Source: Lothar Sachs, Angewandte Statistik, 11. Auflage 2003, S. 160.
//
// Error propagation according to: Lothar Papula, Mathematik für Ingenieure und Naturwissenschaftler Band 3, 5. Auflage 2008, Kapitel 4.3, Seite 678ff: Gaußsches Fehlerfortpflanzungsgesetz
// Sum of two values X,Y with uncertainties sX,sY:        e = SQRT((sX/2)^2 + (sY/2)^2))
// Sum of three values X,Y,Z with uncertainties sX,sY,sZ: e = SQRT((sX/3)^2 + (sY/3)^2 + (sZ/3)^2))
// Division of two values X,Y with uncertainties sX,sY:        e = SQRT((sX/X)^2 + (sY/Y)^2))
// Division of three values X,Y,Z with uncertainties sX,sY,sZ: e = SQRT((sX/Y)^2 + (sY/Y)^2 + (sZ/Z)^2))
//
// Current format of statistics files:
// -----------------------------------
// 1-1 Line 1: Min,Q1,Median,Q3,Max; line 2: SEMs/MADs
// 1-2 Min + SEM/MAD
// 1-3 Q1 + SEM/MAD
// 1-4 Median + SEM/MAD
// 1-5 Q3 + SEM/MAD
// 1-6 Max + SEM/MAD
// 2   Line 1: Q1 + SEM/MAD; line 2: Median + SEM/MAD; line 3: Q3 + SEM/MAD
// 3   Line 1: Min,Q1,Median,Q3,Max; line 2: SEMs/MADs; line 3: combined Min,Q1,Median,Q3,Max            
// 4   All data samples combined in one file or Mann-Whitney-U test results            
//
// _____________________________________________________________________________________________________________

public class Intensity_Analysis implements PlugIn
    {   
    private String title = "Intensity Analysis v1.0";
    private String saveError = "Couldn't save file.";
    private boolean all = false; // job=2
    private boolean overview = false; // job=4
    // All of the following options can be set in chooseImages():
    private int job = 2; // type of analysis to run; 0 = Histograms, 1 = Statistics, 2 = All basic plots, 3 = comparative statistics, 4 = histograms overview
    private int nFiles = 8; // number of files to be opened
    private int nChannels = 2; // number of channels to be used
    private boolean sd = true; // calculate/show standard errors
    private boolean statsMean = true; // use mean instead of median for statistics
    private boolean histoMean = true; // use mean instead of median for histograms
    private boolean statsSEMed = true; // use Standard Error of the Median instead of MAD (median absolute deviation) for statistics
    private boolean ratios = true; // calculate ratios
    private String plottitle = "Intensities";
    private String axislabel = "intensities";
    private String directory = ""; // directory for files
    private String terminal = "aqua"; // output of data (aqua/x11/windows/wxt)
    private boolean screen = true; // show results on screen
    private boolean svg = true; // create .svg file
    private boolean png = true; // create .png file
    private String[] xTitle = new String[nFiles]; // x-labels for the different files (statistics)
    private int[][] ratiosToDo = new int[3][2]; // supports three different ratios

    public void run(String arg) 
        {   
        boolean success = fileDialog();
        if (!success) return;

        success = doTheAnalysis();
        }


    public boolean doTheAnalysis() // do all calculations and create the output files
        {
        // Variables used by several jobs
        TextPanel tp; // content of the output files
        String imagename = ""; // name of the images created by the gnuplot scripts
        String filename = ""; // name of the gnuplot script
        Opener inFile = new Opener(); // for opening input Tiffs
        String inputname = ""; // name of the input file
        ImagePlus img_out; // output image
        FileSaver outFile; // for saving Tiffs
        Ratio_InOut rio = new Ratio_InOut(nFiles, directory);
        Gnu_Scripts gs = new Gnu_Scripts(plottitle, axislabel, terminal, sd, screen, svg, png, nFiles, xTitle);

        if (job==0 || all) // histograms
            {
            // creates 3 files: the data file 00 Histogram Summary.xls with average histogram values, a gnuplot script and a montage of all histogram plots
           
        	for (int ch=1; ch<=nChannels; ch++)
        		{
	            if (!overview) // if only the histogram overview should be created, skip this part
	                { // merge the histograms from several files into one
	                if (sd) // calculate standard errors
	                    {
	                    int[][] data = rio.loadHistoFilesInt(ch); // all histogram files; [bins][files]
	                    if (data==null) return false;
	                    double[] means = new double[data.length]; // mean/median values of all bins
	                    double[] sem = new double[data.length]; // standard errors for all means
	
	                    for (int i=0; i<data.length; i++) // go through bins
	                        {
	                        if (!histoMean) // use medians
	                            {
	                        	means[i] = Ratio_Statistics.getMedian(data[i]);
	                            sem[i] = Ratio_Statistics.getSEMed(data[i]); // calculate standard error of the median
	                            }
	                        else // use means
	                            {
	                            means[i] = Ratio_Statistics.getMean(data[i]); // average each bin
	                            sem[i] = Ratio_Statistics.getSD(data[i], means[i])/Math.sqrt((double)data[0].length); // calculate standard error of the mean
	                            }
	                        }
	        
	                    ResultsTable rt = ResultsTable.getResultsTable(); // for the output data
	                    rt.reset();
	                    rt.setPrecision(9);
	        
	                    for (int i=0; i<means.length; i++)
	                        {
	                        rt.incrementCounter();
	                        if (!histoMean) rt.addValue("Median", means[i]);    
	                        else rt.addValue("Mean", means[i]);    
	                        rt.addValue("SEM", sem[i]);    
	                        }
	                    try
	                        {
	                        rt.saveAs(directory+"00 Histogram Summary "+ch+".xls");    
	                        }
	                    catch (IOException e) 
	                        {
	                        IJ.error(saveError); 
	                        return false;
	                        } 
	    
	                }                
                imagename = "00 Histogram "+ch;
                filename = "histoscript "+ch+".plt";   
                tp = gs.histoScriptInt(ch, imagename);                    
                tp.saveAs(directory+filename); // write script to file  
                } // end of overview=false
	                 
	            // make overview (montage)
	            ImageStack stack = new ImageStack();
	            ImagePlus imp; // temp image for the input histograms as well as the output image
	            ImageProcessor ip;
	            boolean noFiles = false;
	            for (int i=0; i<nFiles; i++) // combine all histograms into a stack
	                {
	                if (!noFiles)
		            	{
		                if (i<9) inputname = "0"+(i+1)+" Histogram plot "+ch+".tif";
		                else inputname = (i+1)+" Histogram plot "+ch+".tif";          
		                imp = inFile.openTiff(directory, inputname);
		                if (imp==null) noFiles=true;
	                    ip = imp.getProcessor(); 
	                    if (i==0) stack = new ImageStack(ip.getWidth(), ip.getHeight());
	                    stack.addSlice(null, ip); // add histogram to stack
	                	}
	                }
	            if (!noFiles)
		        	{
		            imp = new ImagePlus("Histograms "+ch, stack); // create image for the stacks          
		            MontageMaker mm = new MontageMaker(); // make a montage of the files
		            if (nFiles < 6) img_out = mm.makeMontage2(imp, nFiles, 1, 0.5, 1, nFiles, 1, 1, false);
		            else if (nFiles == 6) img_out = mm.makeMontage2(imp, 2, 3, 0.5, 1, nFiles, 1, 1, false);
		            else if (nFiles < 11) img_out = mm.makeMontage2(imp, (int)Math.round(nFiles/2.0), 2, 0.5, 1, nFiles, 1, 1, false);
		            else img_out = mm.makeMontage2(imp, (int)Math.round(nFiles/3.0), 3, 0.5, 1, nFiles, 1, 1, false);
		            img_out.setTitle("Histograms "+ch);
		            outFile = new FileSaver(img_out);
		            outFile.saveAsTiff(directory+"00 Histograms "+ch+".tif");
		        	}
                } // end of channels for-loop
	        } // end of job=0 (histograms)
            
        if (job==1 || all) // basic statistics
            {
            // files created:
            // 00 Statistics Summary "+ch+" 3.xls   - list of all original values, one line per file
            // 00 Statistics Summary "+ch+" 1-1.xls - Line 1: Min,Q1,Median,Q3,Max; line 2: SEMs/MADs
            // 00 Statistics Summary "+ch+" 2.xls   - Line 1: Q1 + SEM/MAD; line 2: Median + SEM/MAD; line 3: Q3 + SEM/MAD
            // 00 Statistics Summary "+ch+" 1-2.xls - Min + SEM/MAD (only if sd=true)
            // 00 Statistics Summary "+ch+" 1-3.xls - Q1 + SEM/MAD (only if sd=true)
            // 00 Statistics Summary "+ch+" 1-4.xls - Median + SEM/MAD (only if sd=true)
            // 00 Statistics Summary "+ch+" 1-5.xls - Q3 + SEM/MAD (only if sd=true)
            // 00 Statistics Summary "+ch+" 1-6.xls - Max + SEM/MAD (only if sd=true)
            // statscript1.plt - GnuPlot script box-whisker plot
            // statscript2.plt - GnuPlot script box plot

        	double[][][] ratioData = new double[1][1][1];	
        	for (int ch=1; ch<=nChannels; ch++)
	    		{
	            // Load data
	            double[][] data = rio.loadStatFilesInt(ch); // returns: data = [data][files]
	            if (data==null) return false;
	            double[] median = new double[data.length];
	            double[] sem = new double[data.length]; // standard error
	            double[] mad = new double[data[0].length]; // used for calculating the median absolute deviation
	            if (ch==1) ratioData = new double[nChannels][2][data.length]; // mean and sem
	            
	            ResultsTable rt = ResultsTable.getResultsTable(); // output
	            rt.reset();
	            rt.setPrecision(9);
	            
	            // Create 00 Statistics Summary 3.xls (list of all original values)
	            for (int i=0; i<data[0].length; i++) // go through all files
	                {
	                rt.incrementCounter();
	                rt.addValue("Min", data[0][i]);    
	                rt.addValue("Q1", data[1][i]);    
	                rt.addValue("Med", data[2][i]);    
	                rt.addValue("Q3", data[3][i]);    
	                rt.addValue("Max", data[4][i]);    
	                rt.addValue("Mean", data[5][i]);    
	                }
	            try
	                {
	                rt.saveAs(directory+"00 Statistics Summary "+ch+"-3.xls");    
	                }
	            catch (IOException e) 
	                {
	                IJ.error(saveError); 
	                return false;
	                } 
	
	            // Calculate median/mean values and errors/deviations
	            // first line: standard results // second line: combined results // third line: inverted results
	            // combined results: 
	            // show the original value if 0<=value<=1, otherwise 1 + (1 - the inverted value)
	            // this way values are uniformly distributed around 1
	            // The original values are used for statistics (standard results, line 1)
	
	            
	            for (int i=0; i<data.length; i++) // data[x][y]: [x]=min,q1,med,q3,max; [y]=file 
	                {
	            	if (statsMean)
		            	{            		
	            		median[i] = Ratio_Statistics.getMean(data[i]); // get the mean for each value (min,q1‚median,q3,max)
//	            		median[i] = StatUtils.mean(data[i]); // get the mean for each value (min,q1‚median,q3,max)
		            	}
	            	else // median
	            		{
	            		median[i] = Ratio_Statistics.getMedian(data[i]); // get the mean for each value (min,q1‚median,q3,max)
//		                median[i] = StatUtils.percentile(data[i], 50); // get the median for each value (min,q1‚median,q3,max)
	            		}    
	
	                if (statsMean)
	                	{
	            		sem[i] = Ratio_Statistics.getSD(data[i],median[i])/Math.sqrt(data[i].length); // get the SEM for each value (min,q1‚median,q3,max)                	
//	            		sem[i] = Math.sqrt(StatUtils.variance(data[i], median[i]))/Math.sqrt(data[i].length); // get the SEM for each value (min,q1‚median,q3,max)                	
	                	}
	                else if (!statsSEMed) // MAD
	                    {
	                    for (int j=0; j<data[0].length; j++) // calc median absolute deviation (mad)
	                        {
	                        mad[j] = Math.abs(median[i]-data[i][j]); // the difference between the individual values in each file and the median
	                        }
		                sem[i] = Ratio_Statistics.getMedian(mad); // mad = the median of the differences of the individual values to the median
//		                sem[i] = StatUtils.percentile(mad, 50); // mad = the median of the differences of the individual values to the median
	                    }
	                else
	                    {
	                    sem[i] = Ratio_Statistics.getSEMed(data[i]); // get standard error of the median                      
	                    }
	                } // from now on the sequences of the values are different from the original files (each column has been sorted individually)
	
	        	if (ratios)
	        		{
	        		ratioData[ch-1][0] = median;
	        		ratioData[ch-1][1] = sem;
	        		}
	            
	            // 00 Statistics Summary 1-1.xls - Line 1: Min,Q1,Median,Q3,Max; line 2: SEMs/MADs
	            rt.reset();
	            rt.incrementCounter();
	            rt.addValue("Min", median[0]);    
	            rt.addValue("Q1", median[1]);    
	            rt.addValue("Med", median[2]);    
	            rt.addValue("Q3", median[3]);    
	            rt.addValue("Max", median[4]);    
                rt.addValue("Mean", median[5]);    
	            rt.incrementCounter();
	            rt.addValue("Min", sem[0]);    
	            rt.addValue("Q1", sem[1]);    
	            rt.addValue("Med", sem[2]);    
	            rt.addValue("Q3", sem[3]);    
	            rt.addValue("Max", sem[4]);    
                rt.addValue("Mean", sem[5]);    
	
	            try
	                {
	                rt.saveAs(directory+"00 Statistics Summary "+ch+"-1-1.xls");    
	                }
	            catch (IOException e) 
	                {
	                IJ.error(saveError); 
	                return false;
	                } 
	
	            // 00 Statistics Summary 2.xls - Line 1: Q1 + SEM/MAD; line 2: Median + SEM/MAD; line 3: Q3 + SEM/MAD
	            rt.reset();
	            for (int i=1; i<median.length-2; i++)
	                {
	                rt.incrementCounter();
                    if (statsMean) rt.addValue("Mean", median[i]);
                    else rt.addValue("Median", median[i]);    
	                if (!statsSEMed) rt.addValue("MAD", sem[i]);
	                else rt.addValue("SEM", sem[i]);
	                }
	            try
	                {
	                rt.saveAs(directory+"00 Statistics Summary "+ch+"-2.xls");    
	                }
	            catch (IOException e) 
	                {
	                IJ.error(saveError); 
	                return false;
	                } 
	
	            // 00 Statistics Summary 1-2 - 1-6.xls - results + SEM/MAD
	            if (sd) // only if SEM/MAD should be plotted
	                {            
	                for (int i=0; i<median.length; i++)
	                    {
	                    rt.reset();
	                    rt.incrementCounter();
	                    if (statsMean) rt.addValue("Mean", median[i]);
	                    else rt.addValue("Median", median[i]);    
	                    if (!statsSEMed) rt.addValue("MAD", sem[i]);
	                    else rt.addValue("SEM", sem[i]);
	                    try
	                        {
	                        rt.saveAs(directory+"00 Statistics Summary "+ch+"-1-"+(i+2)+".xls");    
	                        }
	                    catch (IOException e) 
	                        {
	                        IJ.error(saveError); 
	                        return false;
	                        } 
	                    }
	                }
	
	            // create gnuplot script 1: box-whisker plot
	            imagename = "00 Statistics "+ch+"-1";
	            filename = "statscript1 "+ch+".plt";
                tp = gs.statScript1Int(ch, imagename);                    
	            tp.saveAs(directory+filename); // end of statscript1.plt
	
	            // create gnuplot script 2: box plot
	            imagename = "00 Statistics "+ch+"-2";
	            filename = "statscript2 "+ch+".plt";
                tp = gs.statScript2Int(ch, imagename);                    
	            tp.saveAs(directory+filename); // end of statscript2.plt
	    		} // end of channels for-loop
        	
        	if (ratios)
	        	{
                // NOTE: error propagation according to: Lothar Papula, Mathematik für Ingenieure und Naturwissenschaftler Band 3, 5. Auflage 2008. Kapitel 4.3, Seite 678ff: Gaußsches Fehlerfortpflanzungsgesetz
        		// Division of two values X,Y with uncertainties sX,sY:        e = SQRT((sX/X)^2 + (sY/Y)^2))
//        	    ratiosToDo = new int[3][2]; // supports three different ratios
//	            ratioData = new double[nChannels][2][data.length]; // mean and sem
	            ResultsTable rt = ResultsTable.getResultsTable(); // output
	            rt.reset();
	        	int nComp = 1;
	        	if (nChannels == 3) nComp = 3;
            	double[][][] ratioResults = new double[nComp][2][ratioData[0][0].length];	
             	           	
            	for (int comp=0; comp<nComp; comp++)
	            	{
            		for (int data=0; data<ratioData[0][0].length; data++)
	            		{
		            	ratioResults[comp][0][data] = ratioData[ratiosToDo[comp][0]][0][data] / ratioData[ratiosToDo[comp][1]][0][data];
		            	ratioResults[comp][1][data] = Math.sqrt(Math.pow(ratioData[ratiosToDo[comp][0]][1][data]/ratioData[ratiosToDo[comp][0]][0][data],2)+Math.pow(ratioData[ratiosToDo[comp][1]][1][data]/ratioData[ratiosToDo[comp][1]][0][data],2));    
		            	}

    	            rt.incrementCounter();
    	            rt.addValue("Min", ratioResults[comp][0][0]);    
    	            rt.addValue("Q1", ratioResults[comp][0][1]);    
    	            rt.addValue("Med", ratioResults[comp][0][2]);    
    	            rt.addValue("Q3", ratioResults[comp][0][3]);    
    	            rt.addValue("Max", ratioResults[comp][0][4]);    
                    rt.addValue("Mean", ratioResults[comp][0][5]);    
    	            rt.incrementCounter();
    	            rt.addValue("Min", ratioResults[comp][1][0]);  	  
    	            rt.addValue("Q1", ratioResults[comp][1][1]);    
    	            rt.addValue("Med", ratioResults[comp][1][2]);    
    	            rt.addValue("Q3", ratioResults[comp][1][3]);    
    	            rt.addValue("Max", ratioResults[comp][1][4]);    
                    rt.addValue("Mean", ratioResults[comp][1][5]);    
	            	}
	
	            try
	                {
	                rt.saveAs(directory+"00 Statistics Summary Ratios.xls");    
	                }
	            catch (IOException e) 
	                {
	                IJ.error(saveError); 
	                return false;
	                } 
	        	} // end of ratios
            } // end of job 1 (statistics)

        if (job==3) // Comparative statistics, i.e. compare several situations
            {
            // files created:
            // 00 Statistics Summary 1-1.xls - list of data from all files, one file per line: Min,Q1,Median,Q3,Max
            // 00 Statistics Summary 3.xls   - list of data from all files, three lines per file (arranged in groups): Min,Q1,Median,Q3,Max. 1st group: Standard results, 2nd group: SEM/MADs, 3rd group: Combined results. Groups are separated by "0"s
            // 00 Statistics Summary 2.xls   - list of data from all files, three lines per file: Value, SEM/MAD. 1st line: Quartile 1, 2nd line: Median, 3rd line: Quartile 3. Groups are separated by "0"s
            // 00 Statistics Summary 1-2.xls - list of data from all files, one line per file: Min, SEM/MAD (only if sd=true)
            // 00 Statistics Summary 1-3.xls - list of data from all files, one line per file: Q1, SEM/MAD (only if sd=true)
            // 00 Statistics Summary 1-4.xls - list of data from all files, one line per file: Med, SEM/MAD (only if sd=true)
            // 00 Statistics Summary 1-5.xls - list of data from all files, one line per file: Q3, SEM/MAD (only if sd=true)
            // 00 Statistics Summary 1-6.xls - list of data from all files, one line per file: Max, SEM/MAD (only if sd=true)
            // 00 Statistics Summary 4.xls - Statistical tests based on 'XX Statistics Summary 4.xls' files
            // statscript1.plt - GnuPlot script box-whisker plot
            // statscript2.plt - GnuPlot script box plot
            // statscript3.plt - GnuPlot script box-whisker plot without min/max

            // create 00 Statistics Summary 1-1.xls - list of data from all files, one file per line: Min,Q1,Median,Q3,Max
            // read and combine data from all 'XX Statistics Summary 1-1.xls' files
            double[][] data = rio.loadStatFiles(1, 6, true, " Summary 1-1", false); // read 1 line per file, 5 columns per file, inverse format: data = [files][data], add " Summary 1-1" to the input name, don't just get the median but all data
            if (data==null) return false;

            ResultsTable rt = ResultsTable.getResultsTable(); 
            rt.reset();
            rt.setPrecision(9);
                       
            for (int i=0; i<data.length; i++)
                {
                rt.incrementCounter();
                rt.addValue("Min", data[i][0]);    
                rt.addValue("Q1", data[i][1]);    
                rt.addValue("Med", data[i][2]);    
                rt.addValue("Q3", data[i][3]);    
                rt.addValue("Max", data[i][4]);    
                rt.addValue("Mean", data[i][5]);    
                }

            try
                {
                rt.saveAs(directory+"00 Statistics Summary 1-1.xls");    
                }
            catch (IOException e) 
                {
                IJ.error(saveError); 
                return false;
                } 
            int c = data[0].length; // needed later for 00 Statistics Summary 1-2 - 1-6.xls

            // create 00 Statistics Summary 3.xls - list of data from all files, three lines per file (arranged in groups): Min,Q1,Median,Q3,Max. 1st group: Standard results, 2nd group: SEM/MADs, 3rd group: Combined results. Groups are separated by "0"s
            // read and combine data from all 'XX Statistics Summary 3.xls' files
            data = rio.loadStatFiles(2, 6, true, " Summary 1-1", false); // read 3 lines per file, 5 columns per file, inverse format: data = [files][data], add " Summary 3" to the input name, don't just get the median but all data
            if (data==null) return false;
            rt.reset();
                       
            for (int j=0; j<data[0].length; j+=6)
                {
                for (int l=0; l<nFiles; l++)
                    {
                    rt.incrementCounter();
                    rt.addValue("Min", data[l][j]);    
                    rt.addValue("Q1", data[l][j+1]);    
                    rt.addValue("Med", data[l][j+2]);    
                    rt.addValue("Q3", data[l][j+3]);    
                    rt.addValue("Max", data[l][j+4]);    
                    rt.addValue("Mean", data[l][j+5]);    
                    }
                rt.incrementCounter(); // add a line of "0"s in between groups
                }

            try
                {
                rt.saveAs(directory+"00 Statistics Summary 3.xls");    
                }
            catch (IOException e) 
                {
                IJ.error(saveError); 
                return false;
                } 

            // create 00 Statistics Summary 2.xls - list of data from all files, three lines per file: Value, SEM/MAD. 1st line: Quartile 1, 2nd line: Median, 3rd line: Quartile 3. Groups are separated by "0"s
            // read and combine data from all 'XX Statistics Summary 2.xls' files
            data = rio.loadStatFiles(3, 2, true, " Summary 2", false); // read 3 lines per file, 2 columns per file, inverse format: data = [files][data], add " Summary 2" to the input name, don't just get the median but all data
            if (data==null) return false;
            rt.reset();

            for (int j=0; j<data[0].length; j+=2)
                {
                for (int l=0; l<nFiles; l++)
                    {
                    rt.incrementCounter();
                    rt.addValue("Median", data[l][j]);    
                    rt.addValue("SEM/MAD", data[l][j+1]);
                    }
                rt.incrementCounter(); // add a line of "0"s in between groups
                }

            try
                {
                rt.saveAs(directory+"00 Statistics Summary 2.xls");    
                }
            catch (IOException e) 
                {
                IJ.error(saveError); 
                return false;
                } 

            // create 00 Statistics Summary 1-2 - 1-6.xls - list of data from all files, one line per file: Value, SEM/MAD
            if (sd) // only if uncertainties shall be calculated/plotted
                {            
                for (int i=0; i<c; i++) // do this for as many values as exist in 00 Statistics Summary 1-1.xls
                    {
                    data = rio.loadStatFiles(1, 2, true, " Summary 1-"+(i+2)+"", false); // read 1 line per file, 2 columns per file, inverse format: data = [files][data], add " Summary 1-(i+2)" to the input name, don't just get the median but all data
                    if (data==null) return false;
                    rt.reset();
                    for (int j=0; j<data.length; j++)
                        {
                        rt.incrementCounter();
                        rt.addValue("Median", data[j][0]);    
                        rt.addValue("SEM/MAD", data[j][1]);    
                        }
                    try
                        {
                        rt.saveAs(directory+"00 Statistics Summary 1-"+(i+2)+".xls");    
                        }
                    catch (IOException e) 
                        {
                        IJ.error(saveError); 
                        return false;
                        } 
                    }
                }

            // create 00 Statistics Summary 4.xls - Statistical tests based on 'XX Statistics Summary 4.xls' files
            // the use of ArrayLists is necessary because the different files can contain different amounts of samples
            ArrayList<ArrayList<Double>> dList = rio.loadStatList(" Summary 3"); // read 'XX Statistics Summary 4.xls' files 
            if (dList==null) return false;
            Ratio_Statistics rs = new Ratio_Statistics(nFiles, directory, xTitle);
            boolean success = rs.statTest(dList, ""); // do statistical tests and write the file
            if (!success) return false;

            // create gnuplot script 1: box-whisker plot
            imagename = "00 Statistics 1";
            filename = "statscript1.plt";
            tp = gs.compScript1Int(imagename);                    
            tp.saveAs(directory+filename); // end of statscript1.plt   

            // create gnuplot script 2: box plot
            imagename = "00 Statistics 2";
            filename = "statscript2.plt";
            tp = gs.compScript2Int(imagename);                    
            tp.saveAs(directory+filename); // end of statscript2.plt                    

            // create gnuplot script 3: box-whisker plot without min/max
            imagename = "00 Statistics 3";
            filename = "statscript3.plt";
            tp = gs.compScript3Int(imagename);                    
            tp.saveAs(directory+filename); // end of statscript3.plt     
            } // end of job 3, comparative statistics

        if (job==4) // Ratio statistics, i.e. compare several situations
	        {
	        // files created:
	        // 00 Statistics Summary 1-1.xls - list of data from all files, one file per line: Min,Q1,Median,Q3,Max
	        // 00 Statistics Summary 3.xls   - list of data from all files, three lines per file (arranged in groups): Min,Q1,Median,Q3,Max. 1st group: Standard results, 2nd group: SEM/MADs, 3rd group: Combined results. Groups are separated by "0"s
	        // 00 Statistics Summary 2.xls   - list of data from all files, three lines per file: Value, SEM/MAD. 1st line: Quartile 1, 2nd line: Median, 3rd line: Quartile 3. Groups are separated by "0"s
	        // 00 Statistics Summary 1-2.xls - list of data from all files, one line per file: Min, SEM/MAD (only if sd=true)
	        // 00 Statistics Summary 1-3.xls - list of data from all files, one line per file: Q1, SEM/MAD (only if sd=true)
	        // 00 Statistics Summary 1-4.xls - list of data from all files, one line per file: Med, SEM/MAD (only if sd=true)
	        // 00 Statistics Summary 1-5.xls - list of data from all files, one line per file: Q3, SEM/MAD (only if sd=true)
	        // 00 Statistics Summary 1-6.xls - list of data from all files, one line per file: Max, SEM/MAD (only if sd=true)
	        // 00 Statistics Summary 4.xls - Statistical tests based on 'XX Statistics Summary 4.xls' files
	        // statscript1.plt - GnuPlot script box-whisker plot
	        // statscript2.plt - GnuPlot script box plot
	        // statscript3.plt - GnuPlot script box-whisker plot without min/max
	
	        // create 00 Statistics Summary 1-1.xls - list of data from all files, one file per line: Min,Q1,Median,Q3,Max
	        // read and combine data from all 'XX Statistics Summary 1-1.xls' files
	        double[][] data = rio.loadStatFiles(1, 6, true, " Summary Ratios", false); // read 1 line per file, 5 columns per file, inverse format: data = [files][data], add " Summary 1-1" to the input name, don't just get the median but all data
	        if (data==null) return false;
	
	        ResultsTable rt = ResultsTable.getResultsTable(); 
	        rt.reset();
	        rt.setPrecision(9);
	                   
	        for (int i=0; i<data.length; i++)
	            {
	            rt.incrementCounter();
	            rt.addValue("Min", data[i][0]);    
	            rt.addValue("Q1", data[i][1]);    
	            rt.addValue("Med", data[i][2]);    
	            rt.addValue("Q3", data[i][3]);    
	            rt.addValue("Max", data[i][4]);    
	            rt.addValue("Mean", data[i][5]);    
	            }
	
	        try
	            {
	            rt.saveAs(directory+"00 Statistics Summary Ratios 1-1.xls");    
	            }
	        catch (IOException e) 
	            {
	            IJ.error(saveError); 
	            return false;
	            } 
	
	        // create 00 Statistics Summary 3.xls - list of data from all files, three lines per file (arranged in groups): Min,Q1,Median,Q3,Max. 1st group: Standard results, 2nd group: SEM/MADs, 3rd group: Combined results. Groups are separated by "0"s
	        // read and combine data from all 'XX Statistics Summary 3.xls' files
	        data = rio.loadStatFiles(2, 6, true, " Summary Ratios", false); // read 3 lines per file, 5 columns per file, inverse format: data = [files][data], add " Summary 3" to the input name, don't just get the median but all data
	        if (data==null) return false;
	        rt.reset();
	                   
	        for (int j=0; j<data[0].length; j+=6)
	            {
	            for (int l=0; l<nFiles; l++)
	                {
	                rt.incrementCounter();
	                rt.addValue("Min", data[l][j]);    
	                rt.addValue("Q1", data[l][j+1]);    
	                rt.addValue("Med", data[l][j+2]);    
	                rt.addValue("Q3", data[l][j+3]);    
	                rt.addValue("Max", data[l][j+4]);    
	                rt.addValue("Mean", data[l][j+5]);    
	                }
	            rt.incrementCounter(); // add a line of "0"s in between groups
	            }
	
	        try
	            {
	            rt.saveAs(directory+"00 Statistics Summary Ratios 3.xls");    
	            }
	        catch (IOException e) 
	            {
	            IJ.error(saveError); 
	            return false;
	            } 
	
	        // create 00 Statistics Summary 2.xls - list of data from all files, three lines per file: Value, SEM/MAD. 1st line: Quartile 1, 2nd line: Median, 3rd line: Quartile 3. Groups are separated by "0"s
	        // read and combine data from all 'XX Statistics Summary 2.xls' files
	        rt.reset();
	
	        for (int j=1; j<4; j++) // Q1, Med, Q3
	            {
	            for (int l=0; l<nFiles; l++)
	                {
	                rt.incrementCounter();
	                rt.addValue("Median", data[l][j]);    
	                rt.addValue("SEM/MAD", data[l][j+6]);
	                }
	            rt.incrementCounter(); // add a line of "0"s in between groups
	            }
	
	        try
	            {
	            rt.saveAs(directory+"00 Statistics Summary Ratios 2.xls");    
	            }
	        catch (IOException e) 
	            {
	            IJ.error(saveError); 
	            return false;
	            } 
	
	        // create 00 Statistics Summary 1-2 - 1-7.xls - list of data from all files, one line per file: Value, SEM/MAD
	        if (sd) // only if uncertainties shall be calculated/plotted
	            {            
	            for (int i=0; i<(data[0].length/2); i++) // do this for all values
	                {
	                rt.reset();
	                for (int l=0; l<data.length; l++)
	                    {
	                    rt.incrementCounter();
	                    rt.addValue("Median", data[l][i]);    
	                    rt.addValue("SEM/MAD", data[l][i+6]);    
	                    }
	                try
	                    {
	                    rt.saveAs(directory+"00 Statistics Summary Ratios 1-"+(i+2)+".xls");    
	                    }
	                catch (IOException e) 
	                    {
	                    IJ.error(saveError); 
	                    return false;
	                    } 
	                }
	            }
	
	        // create 00 Statistics Summary 4.xls - Statistical tests based on 'XX Statistics Summary 4.xls' files

	        // statTest needs the data as an ArrayList
	        ArrayList<ArrayList<Double>> dList = new ArrayList<ArrayList<Double>>(nFiles); // data from all files
	        ArrayList<Double> fileList = new ArrayList<Double>(1); // data from one file  
            for (int l=0; l<data.length; l++)
	            {
		        fileList = new ArrayList<Double>(1); // data from one file  
		        fileList.add(data[l][2]); // median
		        dList.add(fileList); // add file to list
	            }
	        
	        Ratio_Statistics rs = new Ratio_Statistics(nFiles, directory, xTitle);
	        boolean success = rs.statTestMWU(dList, "Ratios "); // do statistical tests and write the file
	        if (!success) return false;
	
	        // create gnuplot script: box plot
	        imagename = "00 Statistics Ratios";
	        filename = "statscript Ratios.plt";
	        tp = gs.ratioScript(imagename);                    
	        tp.saveAs(directory+filename); // end of statscript2.plt                    
	        } // end of job 4, ratio statistics       
        
        return true; // all jobs successful
        } // end of createFile()


    private boolean fileDialog() // ask the user what to do
        {
        String[] purpose_temp = new String[6]; // which analyses to run
        purpose_temp[0] = "Histograms";
        purpose_temp[1] = "Statistics";
        purpose_temp[2] = "All basic plots";
        purpose_temp[3] = "Compare statistics results";
        purpose_temp[4] = "Compare ratio results";
        purpose_temp[5] = "Only histogram overview";

        String[] terminalC = new String[4]; // terminal for GnuPlot
        terminalC[0] = "aqua";
        terminalC[1] = "x11";
        terminalC[2] = "windows";
        terminalC[3] = "wxt";

        // create the dialog
        GenericDialog gd = new GenericDialog(title);
        gd.addChoice("What do you want to plot:", purpose_temp, purpose_temp[job]);
        gd.addNumericField("Number of input files:", nFiles, 0);
        gd.addNumericField("Number of channels:", nChannels, 0);
        gd.addCheckbox("Use Mean for Statistics (otherwise: Median)", statsMean);              
        gd.addCheckbox("Use Mean for Histograms (otherwise: Median)", histoMean);              
        gd.addCheckbox("Show error bars", sd);       
        gd.addCheckbox("If Median: Use Standard Error of the Median for Statistics (otherwise: Median Absolute Deviation)", statsSEMed);              
		gd.setInsets(20,20,20);
        gd.addCheckbox("Calculate ratios from mean/median intensities of the channels", ratios);              
		gd.setInsets(20,20,20);
        gd.addStringField("Title of plot:", plottitle, 30);
        gd.addStringField("X axis label:", axislabel, 30);
		gd.setInsets(20,20,0);
        gd.addChoice("Which terminal do you want to use for display:", terminalC, terminal);
		gd.setInsets(0,20,20);
        gd.addMessage("\'aqua\' is recommended for OS X, \'windows\' for Windows");
        gd.addCheckbox("Create .svg file", svg);
        gd.addCheckbox("Create .png file", png);
		gd.setInsets(20,20,0);
        gd.addMessage("Files to be processed by the script need to follow this pattern:");
		gd.setInsets(0,20,0);
        gd.addMessage("\"01 Filename 1.xls\", \"02 Filename 1.xls\" etc.");
		gd.setInsets(20,20,0);
        gd.addMessage("Currently only the medians and not the means are shown in plots and statistic tests.");
        gd.showDialog();
        if (gd.wasCanceled())  return false;
        
        job = gd.getNextChoiceIndex();
        int termID = gd.getNextChoiceIndex();
        nFiles = (int)gd.getNextNumber();
        if (nFiles < 1) 
        	{
            IJ.error("Number of input files can't be 0."); 
        	return false;
        	}
        nChannels = (int)gd.getNextNumber();
        if ((nChannels < 2) || ((nChannels > 3) && ratios))
        	{
            IJ.error("Unsupported number of channels."); 
        	return false;
        	}

        statsMean = gd.getNextBoolean();
        histoMean = gd.getNextBoolean();
        sd = gd.getNextBoolean();
        statsSEMed = gd.getNextBoolean();
        ratios = gd.getNextBoolean();
        svg = gd.getNextBoolean();
        png = gd.getNextBoolean();
        plottitle = gd.getNextString();
        axislabel = gd.getNextString();

        switch (termID) // get the gnuplot terminal
            {
            case 0: terminal = terminalC[0];   
                    break;
            case 1: terminal = terminalC[1];   
                    break;
            case 2: terminal = terminalC[2];   
                    break;
            case 3: terminal = terminalC[3];   
                    break;
            }

        if (job==2) all=true; // run all basic analyses     
        
        if (job==0 || job==1 || job==2) // if histogram or statistics shall be calculated
            {
            if ((statsSEMed && nFiles<4) && (!statsMean || !histoMean))
                {
                IJ.showMessage("Standard error of the median can only be calculated with data from at least 4 files; switching to means (histogram) and MAD (statistics) instead.");
                statsSEMed = false;
                histoMean = true;
                }     
            }
        
        DirectoryChooser sd = new DirectoryChooser("Location of files:");
        directory = sd.getDirectory();
        if (directory==null) return false;
        
        if (job==0 || job>2) ratios = false;
        if (ratios)
	        {
            String[] ch_temp;
            if (nChannels==2)
	            {
	            ch_temp = new String[2];
	            ch_temp[0] = "Channel 1";
	            ch_temp[1] = "Channel 2";
	            }
            else
	            {
	            ch_temp = new String[3];
	            ch_temp[0] = "Channel 1";
	            ch_temp[1] = "Channel 2";
	            ch_temp[2] = "Channel 3";
	            }
            
            gd = new GenericDialog(title);
            gd.addMessage("Choose ratios to be calculated:");
            if (nChannels==2)
            	{
                gd.addMessage("Ratio 1: a/b");           	
                gd.addChoice("Numerator a:", ch_temp, ch_temp[0]);
                gd.addChoice("Denominator b:", ch_temp, ch_temp[1]);
            	}
            if (nChannels==3)
	        	{
                gd.addMessage("Ratio 1: a/b");           	
	            gd.addChoice("Numerator a:", ch_temp, ch_temp[0]);
	            gd.addChoice("Denominator b:", ch_temp, ch_temp[1]);
                gd.addMessage("Ratio 2: c/d");           	
	            gd.addChoice("Numerator c:", ch_temp, ch_temp[0]);
	            gd.addChoice("Denominator d:", ch_temp, ch_temp[2]);
                gd.addMessage("Ratio 3: e/f");           	
	            gd.addChoice("Numerator e:", ch_temp, ch_temp[1]);
	            gd.addChoice("Denominator f:", ch_temp, ch_temp[2]);
	        	}
            gd.showDialog();
            if (gd.wasCanceled())  return false;

            ratiosToDo[0][0] = gd.getNextChoiceIndex();
            ratiosToDo[0][1] = gd.getNextChoiceIndex();
            if (nChannels==3)
	            {
	            ratiosToDo[1][0] = gd.getNextChoiceIndex();
	            ratiosToDo[1][1] = gd.getNextChoiceIndex();
	            ratiosToDo[2][0] = gd.getNextChoiceIndex();
	            ratiosToDo[2][1] = gd.getNextChoiceIndex();
	            }
	        }       
        
        if (job==3 || job==4) // comparative statistics
            { // show another dialog for the x-labels
            if (nFiles<2)
            	{
                IJ.error("At least two files are needed."); 
            	return false;
            	}
            String[] field_temp = new String[nFiles];
            field_temp[0] = "Channel 1"; // create the text fields for the x-labels
            field_temp[1] = "Channel 2";
            if (nFiles>2) field_temp[2] = "Channel 3";
            if (nFiles>3)
                {
                for (int i=3; i<nFiles; i++)
                    {
                    field_temp[i] = "";
                    }                   
                }
            
            gd = new GenericDialog(title);
            gd.addMessage("Choose x-labels:");
            for (int i=1; i<=nFiles; i++)
                {
                gd.addStringField("File "+i+":", field_temp[i-1], 30);
                }

            gd.showDialog();
            if (gd.wasCanceled())  return false;

            xTitle = new String[nFiles]; // get the x-labels
            for (int i=0; i<nFiles; i++)
                {
                xTitle[i] = gd.getNextString();
                }
            }

        if (job==5) // only create histogram overview
            {
            job = 0;
            overview = true;
            }

        return true;
        } // end of fileDialog()
    } 